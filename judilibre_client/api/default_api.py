from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from judilibre_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    # Authentication setting
    auth_settings = ["judilibre_api_key"]

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def decision(self, id, **kwargs):  # noqa: E501
        """Permet de récupérer le contenu intégral d'une décision.  # noqa: E501

        Connaissant l'identifiant unique d'une décision, le point d'entrée `GET /decision` permet d'en récupérer le contenu intégral (structuré, mais sans mise en forme), à savoir :  * L'identifiant de sa juridiction ; * L'identifiant de sa chambre ; * Sa formation ; * Son numéro de pourvoi ; * Son ECLI (« European Case Law Identifier » : identifiant européen de la jurisprudence) ; * Son code NAC ; * Son niveau de publication ; * Son numéro de publication au bulletin ; * Sa solution ; * Sa date ; * Son texte intégral ; * Les délimitations des principales zones d'intérêt de son texte intégral (introduction, exposé du litige, moyens, motivations, dispositif et moyens annexés) ; * Ses éléments de titrage ; * Son sommaire ; * Ses documents associés (communiqué, note explicative, traduction, rapport, avis de l'avocat général, etc.) ; * Les textes appliqués ; * Les rapprochements de jurisprudence.  Certaines des informations ne sont retournées que sous forme de clé ou d'identifiant numérique (juridiction, chambre, niveau de publication, etc.). Il convient dès lors d'utiliser le point d'entrée `GET /taxonomy` pour en récupérer l'intitulé complet, ou d'effectuer la requête en utilisant le paramètre `resolve_references=true`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.decision(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Identifiant de la décision à récupérer. (required)
        :param object resolve_references: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra, pour chaque information retournée par défaut sous forme de clé, l'intitulé complet de celle-ci (vaut `false` par défaut).
        :param object query: Chaîne de caractères correspondant à la recherche. Ce paramètre est utilisé pour surligner en retour, dans le texte intégral de la décision, les termes correspondant avec la recherche initiale (ces termes étant délimitées par des balises `<em>`).
        :param object operator: Opérateur logique reliant les multiples termes que le paramètre `query` peut contenir (`or` par défaut, `and` ou `exact` – dans ce dernier cas le moteur recherchera exactement le contenu du paramètre `query`).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.decision_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.decision_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def decision_with_http_info(self, id, **kwargs):  # noqa: E501
        """Permet de récupérer le contenu intégral d'une décision.  # noqa: E501

        Connaissant l'identifiant unique d'une décision, le point d'entrée `GET /decision` permet d'en récupérer le contenu intégral (structuré, mais sans mise en forme), à savoir :  * L'identifiant de sa juridiction ; * L'identifiant de sa chambre ; * Sa formation ; * Son numéro de pourvoi ; * Son ECLI (« European Case Law Identifier » : identifiant européen de la jurisprudence) ; * Son code NAC ; * Son niveau de publication ; * Son numéro de publication au bulletin ; * Sa solution ; * Sa date ; * Son texte intégral ; * Les délimitations des principales zones d'intérêt de son texte intégral (introduction, exposé du litige, moyens, motivations, dispositif et moyens annexés) ; * Ses éléments de titrage ; * Son sommaire ; * Ses documents associés (communiqué, note explicative, traduction, rapport, avis de l'avocat général, etc.) ; * Les textes appliqués ; * Les rapprochements de jurisprudence.  Certaines des informations ne sont retournées que sous forme de clé ou d'identifiant numérique (juridiction, chambre, niveau de publication, etc.). Il convient dès lors d'utiliser le point d'entrée `GET /taxonomy` pour en récupérer l'intitulé complet, ou d'effectuer la requête en utilisant le paramètre `resolve_references=true`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.decision_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Identifiant de la décision à récupérer. (required)
        :param object resolve_references: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra, pour chaque information retournée par défaut sous forme de clé, l'intitulé complet de celle-ci (vaut `false` par défaut).
        :param object query: Chaîne de caractères correspondant à la recherche. Ce paramètre est utilisé pour surligner en retour, dans le texte intégral de la décision, les termes correspondant avec la recherche initiale (ces termes étant délimitées par des balises `<em>`).
        :param object operator: Opérateur logique reliant les multiples termes que le paramètre `query` peut contenir (`or` par défaut, `and` ou `exact` – dans ce dernier cas le moteur recherchera exactement le contenu du paramètre `query`).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "resolve_references", "query", "operator"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method decision" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `decision`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "id" in params:
            query_params.append(("id", params["id"]))  # noqa: E501
        if "resolve_references" in params:
            query_params.append(
                ("resolve_references", params["resolve_references"])
            )  # noqa: E501
        if "query" in params:
            query_params.append(("query", params["query"]))  # noqa: E501
        if "operator" in params:
            query_params.append(("operator", params["operator"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        return self.api_client.call_api(
            "/decision",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=self.auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def export(self, batch, **kwargs):  # noqa: E501
        """Permet d'effectuer un export par lot de décisions de justice.  # noqa: E501

        Destiné aux utilisateurs désirant procéder à leur propre indexation et mise à disposition du contenu, ce point d'entrée leur permet de récupérer des lots de décisions complètes suivant des paramètres et critères simples :  * Nature de décision (filtre) ; * Matière (filtre) ; * Chambre et formation (filtre) ; * Juridiction et commission (filtre) ; * Niveau de publication (filtre) ; * Type de solution (filtre) ; * Intervalle de dates (date de création ou de mise à jour) (filtre) ; * Date (tri) ; * Nombre de décisions par lot, index du lot (navigation).  L'export par lots est limité par défaut (pour une connexion non authentifiée) à 10 résultats par lot, pour un maximum de 1000 résultats au total.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export(batch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object batch: Permet de déterminer le numéro du lot de résultats à retourner (le premier lot ayant la valeur 0). (required)
        :param object type: Filtre les résultats suivant la natures des décisions (parmi les valeurs : `arret`, `qpc`, `ordonnance`, `saisie`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=type`). Un export avec un paramètre `type` vide ou manquant retourne des décisions de toutes natures.
        :param object theme: Filtre les résultats suivant la matière (nomenclature de la Cour de cassation) relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=theme`). Un export avec un paramètre `theme` vide ou manquant retourne des décisions relatives à toutes les matières.
        :param object chamber: Filtre les résultats suivant la chambre relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=chamber`). Un export avec un paramètre `chamber` vide ou manquant retourne des décisions relatives à toutes les chambres.
        :param object formation: Filtre les résultats suivant la formation relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=formation`). Un export avec un paramètre `formation` vide ou manquant retourne des décisions relatives à toutes les formations.
        :param object jurisdiction: Filtre les résultats suivant la juridiction relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=jurisdiction`). Un export avec un paramètre `jurisdiction` vide ou manquant retourne des décisions relatives à toutes les juridictions.
        :param object committee: Filtre les résultats suivant la commission relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=committee`). Un export avec un paramètre `committee` vide ou manquant retourne des décisions relatives à toutes les commissions.
        :param object publication: Filtre les résultats suivant le niveau de publication des décisions (parmi les valeurs : `b`, `r`, `l`, `c`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=publication`). Un export avec un paramètre `publication` vide ou manquant retourne des décisions de n'importe quel niveau de publication.
        :param object solution: Filtre les résultats suivant le type de solution des décisions (parmi les valeurs : `annulation`, `avis`, `cassation`, `decheance`, `designation`, `irrecevabilite`, `nonlieu`, `qpc`, `rabat`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=solution`). Un export avec un paramètre `solution` vide retourne des décisions ayant n'importe quel type de solution.
        :param object date_start: Combiné avec le paramètre `date_end`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object date_end: Combiné avec le paramètre `date_start`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object abridged: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra la version abrégée des décisions (sans texte intégral ni métadonnées détaillées, vaut `false` par défaut).
        :param object date_type: Type de date à prendre en compte pour l’intervalle de dates fourni pour l’export (vaut `creation` ou `update`).
        :param object order: Permet de choisir l’ordre du tri des décisions exportées ('asc' pour un tri par date chronologique ou 'desc' pour un tri par date antichronologique, vaut 'asc' par défaut).
        :param object batch_size: Permet de déterminer le nombre de résultats retournés par lot (1000 maximum, vaut 10 par défaut).
        :param object resolve_references: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra, pour chaque information retournée par défaut sous forme de clé, l'intitulé complet de celle-ci (vaut `false` par défaut).
        :param object with_file_of_type: Filtre les résultats suivant le type de documents associés aux décisions, parmi les valeurs : `prep_rapp` (Rapport du rapporteur), `prep_avis` (Avis de l’avocat général), `prep_oral` (Avis oral de l’avocat général), `comm_comm` (Communiqué), `comm_note` (Note explicative), `comm_nora` (Notice au rapport annuel), `comm_lett` (Lettre de chambre), `comm_trad` (Arrêt traduit). Les valeurs disponibles sont accessibles via `GET /taxonomy?id=filetype`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.export_with_http_info(batch, **kwargs)  # noqa: E501
        else:
            (data) = self.export_with_http_info(batch, **kwargs)  # noqa: E501
            return data

    def export_with_http_info(self, batch, **kwargs):  # noqa: E501
        """Permet d'effectuer un export par lot de décisions de justice.  # noqa: E501

        Destiné aux utilisateurs désirant procéder à leur propre indexation et mise à disposition du contenu, ce point d'entrée leur permet de récupérer des lots de décisions complètes suivant des paramètres et critères simples :  * Nature de décision (filtre) ; * Matière (filtre) ; * Chambre et formation (filtre) ; * Juridiction et commission (filtre) ; * Niveau de publication (filtre) ; * Type de solution (filtre) ; * Intervalle de dates (date de création ou de mise à jour) (filtre) ; * Date (tri) ; * Nombre de décisions par lot, index du lot (navigation).  L'export par lots est limité par défaut (pour une connexion non authentifiée) à 10 résultats par lot, pour un maximum de 1000 résultats au total.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_with_http_info(batch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object batch: Permet de déterminer le numéro du lot de résultats à retourner (le premier lot ayant la valeur 0). (required)
        :param object type: Filtre les résultats suivant la natures des décisions (parmi les valeurs : `arret`, `qpc`, `ordonnance`, `saisie`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=type`). Un export avec un paramètre `type` vide ou manquant retourne des décisions de toutes natures.
        :param object theme: Filtre les résultats suivant la matière (nomenclature de la Cour de cassation) relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=theme`). Un export avec un paramètre `theme` vide ou manquant retourne des décisions relatives à toutes les matières.
        :param object chamber: Filtre les résultats suivant la chambre relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=chamber`). Un export avec un paramètre `chamber` vide ou manquant retourne des décisions relatives à toutes les chambres.
        :param object formation: Filtre les résultats suivant la formation relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=formation`). Un export avec un paramètre `formation` vide ou manquant retourne des décisions relatives à toutes les formations.
        :param object jurisdiction: Filtre les résultats suivant la juridiction relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=jurisdiction`). Un export avec un paramètre `jurisdiction` vide ou manquant retourne des décisions relatives à toutes les juridictions.
        :param object committee: Filtre les résultats suivant la commission relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=committee`). Un export avec un paramètre `committee` vide ou manquant retourne des décisions relatives à toutes les commissions.
        :param object publication: Filtre les résultats suivant le niveau de publication des décisions (parmi les valeurs : `b`, `r`, `l`, `c`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=publication`). Un export avec un paramètre `publication` vide ou manquant retourne des décisions de n'importe quel niveau de publication.
        :param object solution: Filtre les résultats suivant le type de solution des décisions (parmi les valeurs : `annulation`, `avis`, `cassation`, `decheance`, `designation`, `irrecevabilite`, `nonlieu`, `qpc`, `rabat`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=solution`). Un export avec un paramètre `solution` vide retourne des décisions ayant n'importe quel type de solution.
        :param object date_start: Combiné avec le paramètre `date_end`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object date_end: Combiné avec le paramètre `date_start`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object abridged: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra la version abrégée des décisions (sans texte intégral ni métadonnées détaillées, vaut `false` par défaut).
        :param object date_type: Type de date à prendre en compte pour l’intervalle de dates fourni pour l’export (vaut `creation` ou `update`).
        :param object order: Permet de choisir l’ordre du tri des décisions exportées ('asc' pour un tri par date chronologique ou 'desc' pour un tri par date antichronologique, vaut 'asc' par défaut).
        :param object batch_size: Permet de déterminer le nombre de résultats retournés par lot (1000 maximum, vaut 10 par défaut).
        :param object resolve_references: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra, pour chaque information retournée par défaut sous forme de clé, l'intitulé complet de celle-ci (vaut `false` par défaut).
        :param object with_file_of_type: Filtre les résultats suivant le type de documents associés aux décisions, parmi les valeurs : `prep_rapp` (Rapport du rapporteur), `prep_avis` (Avis de l’avocat général), `prep_oral` (Avis oral de l’avocat général), `comm_comm` (Communiqué), `comm_note` (Note explicative), `comm_nora` (Notice au rapport annuel), `comm_lett` (Lettre de chambre), `comm_trad` (Arrêt traduit). Les valeurs disponibles sont accessibles via `GET /taxonomy?id=filetype`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "batch",
            "type",
            "theme",
            "chamber",
            "formation",
            "jurisdiction",
            "committee",
            "publication",
            "solution",
            "date_start",
            "date_end",
            "abridged",
            "date_type",
            "order",
            "batch_size",
            "resolve_references",
            "with_file_of_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method export" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'batch' is set
        if self.api_client.client_side_validation and (
            "batch" not in params or params["batch"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `batch` when calling `export`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "type" in params:
            query_params.append(("type", params["type"]))  # noqa: E501
        if "theme" in params:
            query_params.append(("theme", params["theme"]))  # noqa: E501
        if "chamber" in params:
            query_params.append(("chamber", params["chamber"]))  # noqa: E501
        if "formation" in params:
            query_params.append(("formation", params["formation"]))  # noqa: E501
        if "jurisdiction" in params:
            query_params.append(("jurisdiction", params["jurisdiction"]))  # noqa: E501
        if "committee" in params:
            query_params.append(("committee", params["committee"]))  # noqa: E501
        if "publication" in params:
            query_params.append(("publication", params["publication"]))  # noqa: E501
        if "solution" in params:
            query_params.append(("solution", params["solution"]))  # noqa: E501
        if "date_start" in params:
            query_params.append(("date_start", params["date_start"]))  # noqa: E501
        if "date_end" in params:
            query_params.append(("date_end", params["date_end"]))  # noqa: E501
        if "abridged" in params:
            query_params.append(("abridged", params["abridged"]))  # noqa: E501
        if "date_type" in params:
            query_params.append(("date_type", params["date_type"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "batch_size" in params:
            query_params.append(("batch_size", params["batch_size"]))  # noqa: E501
        if "batch" in params:
            query_params.append(("batch", params["batch"]))  # noqa: E501
        if "resolve_references" in params:
            query_params.append(
                ("resolve_references", params["resolve_references"])
            )  # noqa: E501
        if "with_file_of_type" in params:
            query_params.append(
                ("withFileOfType", params["with_file_of_type"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        return self.api_client.call_api(
            "/export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=self.auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def healthcheck(self, **kwargs):  # noqa: E501
        """Permet de récupérer l'état de disponibilité du service.  # noqa: E501

        Ce point d'entrée permet de connaître l'état de disponibilité du service (disponible ou indisponible).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.healthcheck(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.healthcheck_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.healthcheck_with_http_info(**kwargs)  # noqa: E501
            return data

    def healthcheck_with_http_info(self, **kwargs):  # noqa: E501
        """Permet de récupérer l'état de disponibilité du service.  # noqa: E501

        Ce point d'entrée permet de connaître l'état de disponibilité du service (disponible ou indisponible).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.healthcheck_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method healthcheck" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        return self.api_client.call_api(
            "/healthcheck",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=self.auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def search(self, **kwargs):  # noqa: E501
        """Permet d'effectuer une recherche dans les données ouvertes des décisions de justice.  # noqa: E501

        Le point d'entrée `GET /search` permet d'effectuer une recherche dans la base de données ouverte des décisions de justice, suivant les paramètres, filtres et critères suivants :  * Texte en saisie libre, lequel sera mis en correspondance avec tout ou partie du contenu des décisions ; * Le mode de mise en rapport des termes de la recherche (*ou*, *et*, expression exacte) ; * Contenu ciblé par la recherche : décision intégrale, zones spécifiques de la décision (exposé du litige, moyens, motivations, dispositif), sommaire, titrages, numéro de pourvoi, etc. ; * Nature de décision (filtre) ; * Matière (filtre) ; * Chambre et formation (filtre) ; * Juridiction et commission (filtre) ; * Niveau de publication (filtre) ; * Type de solution (filtre) ; * Intervalle de dates (filtre) ; * Pertinence et date (tri) ; * Nombre de résultats par page et index de la page de résultats affichée (navigation).  La pertinence de la recherche équivaut à un score calculé par Elasticsearch à partir de la correspondance entre le texte en saisie libre et le contenu recherché. Par défaut, le moteur de recherche retourne les résultats classés par pertinence décroissante.  Les filtres sélectionnés ne modifient pas le score, mais permettent de retirer des résultats les décisions dont le contenu ne coïncide pas avec eux.  Le résultat de la recherche est nécessairement paginé (avec un maximum de 50 résultats par page, pour un maximum de 10 000 résultats au total) et ne contient qu'un aperçu des décisions trouvées (chacune possédant un identifiant unique).  Certaines des informations ne sont retournées que sous forme de clé ou d'identifiant numérique (juridiction, chambre, niveau de publication, etc.). Il convient dès lors d'utiliser le point d'entrée `GET /taxonomy` pour en récupérer l'intitulé complet, ou d'effectuer la requête en utilisant le paramètre `resolve_references=true`.  Le texte intégral et les zones qu'il contient ne sont pas inclus dans les résultats de la recherche.  La récupération d'une décision complète (incluant son texte et les zones qu'il contient) repose sur le point d'entrée `GET /decision`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object query: Chaîne de caractères correspondant à la recherche. Une recherche avec un paramètre `query` vide ou manquant est ignorée et retourne un résultat vide.
        :param object field: Liste des champs, métadonnées ou zones de contenu ciblés par la recherche (parmi les valeurs : `expose`, `moyens`, `motivations`, `dispositif`, `annexes`, `sommaire`, `titrage`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=field`). Une recherche avec un paramètre `field` vide ou manquant est appliquée à l'intégralité de la décision (introduction et moyens annexés compris) mais va exclure les métadonnées (sommaire, titrage, etc.).
        :param object operator: Opérateur logique reliant les multiples termes que le paramètre `query` peut contenir (`or` par défaut, `and` ou `exact` – dans ce dernier cas le moteur recherchera exactement le contenu du paramètre `query`).
        :param object type: Filtre les résultats suivant la natures des décisions (parmi les valeurs : `arret`, `qpc`, `ordonnance`, `saisie`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=type`). Une recherche avec un paramètre `type` vide ou manquant retourne des décisions de toutes natures.
        :param object theme: Filtre les résultats suivant la matière (nomenclature de la Cour de cassation) relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=theme`). Une recherche avec un paramètre `theme` vide ou manquant retourne des décisions relatives à toutes les matières.
        :param object chamber: Filtre les résultats suivant la chambre relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=chamber`). Une recherche avec un paramètre `chamber` vide ou manquant retourne des décisions relatives à toutes les chambres.
        :param object formation: Filtre les résultats suivant la formation relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=formation`). Une recherche avec un paramètre `formation` vide ou manquant retourne des décisions relatives à toutes les formations.
        :param object jurisdiction: Filtre les résultats suivant la juridiction relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=jurisdiction`). Une recherche avec un paramètre `jurisdiction` vide ou manquant retourne des décisions relatives à toutes les juridictions.
        :param object committee: Filtre les résultats suivant la commission relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=committee`). Une recherche avec un paramètre `committee` vide ou manquant retourne des décisions relatives à toutes les commissions.
        :param object publication: Filtre les résultats suivant le niveau de publication des décisions (parmi les valeurs : `b`, `r`, `l`, `c`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=publication`). Une recherche avec un paramètre `publication` vide ou manquant retourne des décisions de n'importe quel niveau de publication.
        :param object solution: Filtre les résultats suivant le type de solution des décisions (parmi les valeurs : `annulation`, `avis`, `cassation`, `decheance`, `designation`, `irrecevabilite`, `nonlieu`, `qpc`, `rabat`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=solution`). Une recherche avec un paramètre `solution` vide retourne des décisions ayant n'importe quel type de solution.
        :param object date_start: Combiné avec le paramètre `date_end`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object date_end: Combiné avec le paramètre `date_start`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object sort: Permet de choisir la valeur suivant laquelle les résultats sont triés (`score` pour un tri par pertinence, `scorepub` pour un tri par pertinence et niveau de publication et `date` pour un tri par date, vaut `scorepub` par défaut).
        :param object order: Permet de choisir l'ordre du tri (`asc` pour un tri ascendant ou `desc` pour un tri descendant, vaut `desc` par défaut).
        :param object page_size: Permet de déterminer le nombre de résultats retournés par page (50 maximum, vaut 10 par défaut).
        :param object page: Permet de déterminer le numéro de la page de résultats à retourner (la première page valant `0`).
        :param object resolve_references: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra, pour chaque information retournée par défaut sous forme de clé, l'intitulé complet de celle-ci (vaut `false` par défaut).
        :param object with_file_of_type: Filtre les résultats suivant le type de documents associés aux décisions, parmi les valeurs : `prep_rapp` (Rapport du rapporteur), `prep_avis` (Avis de l’avocat général), `prep_oral` (Avis oral de l’avocat général), `comm_comm` (Communiqué), `comm_note` (Note explicative), `comm_nora` (Notice au rapport annuel), `comm_lett` (Lettre de chambre), `comm_trad` (Arrêt traduit). Les valeurs disponibles sont accessibles via `GET /taxonomy?id=filetype`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_with_http_info(self, **kwargs):  # noqa: E501
        """Permet d'effectuer une recherche dans les données ouvertes des décisions de justice.  # noqa: E501

        Le point d'entrée `GET /search` permet d'effectuer une recherche dans la base de données ouverte des décisions de justice, suivant les paramètres, filtres et critères suivants :  * Texte en saisie libre, lequel sera mis en correspondance avec tout ou partie du contenu des décisions ; * Le mode de mise en rapport des termes de la recherche (*ou*, *et*, expression exacte) ; * Contenu ciblé par la recherche : décision intégrale, zones spécifiques de la décision (exposé du litige, moyens, motivations, dispositif), sommaire, titrages, numéro de pourvoi, etc. ; * Nature de décision (filtre) ; * Matière (filtre) ; * Chambre et formation (filtre) ; * Juridiction et commission (filtre) ; * Niveau de publication (filtre) ; * Type de solution (filtre) ; * Intervalle de dates (filtre) ; * Pertinence et date (tri) ; * Nombre de résultats par page et index de la page de résultats affichée (navigation).  La pertinence de la recherche équivaut à un score calculé par Elasticsearch à partir de la correspondance entre le texte en saisie libre et le contenu recherché. Par défaut, le moteur de recherche retourne les résultats classés par pertinence décroissante.  Les filtres sélectionnés ne modifient pas le score, mais permettent de retirer des résultats les décisions dont le contenu ne coïncide pas avec eux.  Le résultat de la recherche est nécessairement paginé (avec un maximum de 50 résultats par page, pour un maximum de 10 000 résultats au total) et ne contient qu'un aperçu des décisions trouvées (chacune possédant un identifiant unique).  Certaines des informations ne sont retournées que sous forme de clé ou d'identifiant numérique (juridiction, chambre, niveau de publication, etc.). Il convient dès lors d'utiliser le point d'entrée `GET /taxonomy` pour en récupérer l'intitulé complet, ou d'effectuer la requête en utilisant le paramètre `resolve_references=true`.  Le texte intégral et les zones qu'il contient ne sont pas inclus dans les résultats de la recherche.  La récupération d'une décision complète (incluant son texte et les zones qu'il contient) repose sur le point d'entrée `GET /decision`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object query: Chaîne de caractères correspondant à la recherche. Une recherche avec un paramètre `query` vide ou manquant est ignorée et retourne un résultat vide.
        :param object field: Liste des champs, métadonnées ou zones de contenu ciblés par la recherche (parmi les valeurs : `expose`, `moyens`, `motivations`, `dispositif`, `annexes`, `sommaire`, `titrage`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=field`). Une recherche avec un paramètre `field` vide ou manquant est appliquée à l'intégralité de la décision (introduction et moyens annexés compris) mais va exclure les métadonnées (sommaire, titrage, etc.).
        :param object operator: Opérateur logique reliant les multiples termes que le paramètre `query` peut contenir (`or` par défaut, `and` ou `exact` – dans ce dernier cas le moteur recherchera exactement le contenu du paramètre `query`).
        :param object type: Filtre les résultats suivant la natures des décisions (parmi les valeurs : `arret`, `qpc`, `ordonnance`, `saisie`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=type`). Une recherche avec un paramètre `type` vide ou manquant retourne des décisions de toutes natures.
        :param object theme: Filtre les résultats suivant la matière (nomenclature de la Cour de cassation) relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=theme`). Une recherche avec un paramètre `theme` vide ou manquant retourne des décisions relatives à toutes les matières.
        :param object chamber: Filtre les résultats suivant la chambre relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=chamber`). Une recherche avec un paramètre `chamber` vide ou manquant retourne des décisions relatives à toutes les chambres.
        :param object formation: Filtre les résultats suivant la formation relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=formation`). Une recherche avec un paramètre `formation` vide ou manquant retourne des décisions relatives à toutes les formations.
        :param object jurisdiction: Filtre les résultats suivant la juridiction relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=jurisdiction`). Une recherche avec un paramètre `jurisdiction` vide ou manquant retourne des décisions relatives à toutes les juridictions.
        :param object committee: Filtre les résultats suivant la commission relative aux décisions (les valeurs disponibles sont accessibles via `GET /taxonomy?id=committee`). Une recherche avec un paramètre `committee` vide ou manquant retourne des décisions relatives à toutes les commissions.
        :param object publication: Filtre les résultats suivant le niveau de publication des décisions (parmi les valeurs : `b`, `r`, `l`, `c`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=publication`). Une recherche avec un paramètre `publication` vide ou manquant retourne des décisions de n'importe quel niveau de publication.
        :param object solution: Filtre les résultats suivant le type de solution des décisions (parmi les valeurs : `annulation`, `avis`, `cassation`, `decheance`, `designation`, `irrecevabilite`, `nonlieu`, `qpc`, `rabat`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy?id=solution`). Une recherche avec un paramètre `solution` vide retourne des décisions ayant n'importe quel type de solution.
        :param object date_start: Combiné avec le paramètre `date_end`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object date_end: Combiné avec le paramètre `date_start`, permet de restreindre les résultats à un intervalle de dates, au format ISO-8601 (par exemple 2021-05-13).
        :param object sort: Permet de choisir la valeur suivant laquelle les résultats sont triés (`score` pour un tri par pertinence, `scorepub` pour un tri par pertinence et niveau de publication et `date` pour un tri par date, vaut `scorepub` par défaut).
        :param object order: Permet de choisir l'ordre du tri (`asc` pour un tri ascendant ou `desc` pour un tri descendant, vaut `desc` par défaut).
        :param object page_size: Permet de déterminer le nombre de résultats retournés par page (50 maximum, vaut 10 par défaut).
        :param object page: Permet de déterminer le numéro de la page de résultats à retourner (la première page valant `0`).
        :param object resolve_references: Lorsque ce paramètre vaut `true`, le résultat de la requête contiendra, pour chaque information retournée par défaut sous forme de clé, l'intitulé complet de celle-ci (vaut `false` par défaut).
        :param object with_file_of_type: Filtre les résultats suivant le type de documents associés aux décisions, parmi les valeurs : `prep_rapp` (Rapport du rapporteur), `prep_avis` (Avis de l’avocat général), `prep_oral` (Avis oral de l’avocat général), `comm_comm` (Communiqué), `comm_note` (Note explicative), `comm_nora` (Notice au rapport annuel), `comm_lett` (Lettre de chambre), `comm_trad` (Arrêt traduit). Les valeurs disponibles sont accessibles via `GET /taxonomy?id=filetype`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "query",
            "field",
            "operator",
            "type",
            "theme",
            "chamber",
            "formation",
            "jurisdiction",
            "committee",
            "publication",
            "solution",
            "date_start",
            "date_end",
            "sort",
            "order",
            "page_size",
            "page",
            "resolve_references",
            "with_file_of_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method search" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "query" in params:
            query_params.append(("query", params["query"]))  # noqa: E501
        if "field" in params:
            query_params.append(("field", params["field"]))  # noqa: E501
        if "operator" in params:
            query_params.append(("operator", params["operator"]))  # noqa: E501
        if "type" in params:
            query_params.append(("type", params["type"]))  # noqa: E501
        if "theme" in params:
            query_params.append(("theme", params["theme"]))  # noqa: E501
        if "chamber" in params:
            query_params.append(("chamber", params["chamber"]))  # noqa: E501
        if "formation" in params:
            query_params.append(("formation", params["formation"]))  # noqa: E501
        if "jurisdiction" in params:
            query_params.append(("jurisdiction", params["jurisdiction"]))  # noqa: E501
        if "committee" in params:
            query_params.append(("committee", params["committee"]))  # noqa: E501
        if "publication" in params:
            query_params.append(("publication", params["publication"]))  # noqa: E501
        if "solution" in params:
            query_params.append(("solution", params["solution"]))  # noqa: E501
        if "date_start" in params:
            query_params.append(("date_start", params["date_start"]))  # noqa: E501
        if "date_end" in params:
            query_params.append(("date_end", params["date_end"]))  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("page_size", params["page_size"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "resolve_references" in params:
            query_params.append(
                ("resolve_references", params["resolve_references"])
            )  # noqa: E501
        if "with_file_of_type" in params:
            query_params.append(
                ("withFileOfType", params["with_file_of_type"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        return self.api_client.call_api(
            "/search",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=self.auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def stats(self, **kwargs):  # noqa: E501
        """Permet de récupérer des statistiques sur le contenu de la base JUDILIBRE.  # noqa: E501

        Ce point d'entrée publiera notamment les statistiques suivantes, mises à jour quotidiennement :  * Nombre de décisions indexées (au total, par année, par juridiction) ; * Nombre de requêtes (par jour, par semaine, etc.) ; * Date de la décision la plus ancienne, date de la décision la plus récente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def stats_with_http_info(self, **kwargs):  # noqa: E501
        """Permet de récupérer des statistiques sur le contenu de la base JUDILIBRE.  # noqa: E501

        Ce point d'entrée publiera notamment les statistiques suivantes, mises à jour quotidiennement :  * Nombre de décisions indexées (au total, par année, par juridiction) ; * Nombre de requêtes (par jour, par semaine, etc.) ; * Date de la décision la plus ancienne, date de la décision la plus récente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method stats" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        return self.api_client.call_api(
            "/stats",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=self.auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def taxonomy(self, **kwargs):  # noqa: E501
        """Permet de récupérer les listes des termes employés par le processus de recherche.  # noqa: E501

        L'API publique propose la récupération des listes des termes (sous la forme d'un couple clé/valeur) constituants les différents critères et filtres pris en compte par le processus de recherche et les données qu'il restitue, notamment :  * La liste des types de décision (`type`) ; * La liste des juridictions dont le système intègre les décisions (`jurisdiction`) ; * La liste des chambres (`chamber`) ; * La liste des formations (`formation`) ; * La liste des commissions (`committee`) ; * La liste des niveaux de publication (`publication`) ; * La liste des matières (`theme`) ; * La liste des solutions (`solution`) ; * La liste des champs et des zones de contenu des décisions pouvant être ciblés par la recherche (`field`) ; * La liste des zones de contenu des décisions (`zones`) ; * etc.  La publication de cette taxonomie permet principalement au prestataire chargé de l'implémentation du frontend (ainsi qu'à certains réutilisateurs avancés) d'automatiser la constitution des formulaires de recherche et l'enrichissement des résultats retournés.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taxonomy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Identifiant de l'entrée de taxonomie à interroger (`type`, `jurisdiction`, `chamber`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy` sans paramètre).
        :param object key: Clé du terme dont on veut récupérer l'intitulé complet (le paramètre `id` est alors requis), par exemple : la requête `GET /taxonomy?id=jurisdiction&key=cc` retournera `Cour de cassation`.
        :param object value: Intitulé complet du terme dont on veut récupérer la clé (le paramètre `id` est alors requis), par exemple : la requête `GET /taxonomy?id=jurisdiction&value=cour%20de%20cassation` retournera `cc`.
        :param object context_value: Valeur pouvant être requise pour contextualiser certaines listes (par exemple, la liste des chambres qui n’a de sens que dans le contexte d’une juridiction – ainsi, pour obtenir la liste des chambres de la Cour de cassation : `GET /taxonomy?id=chamber&context_value=cc`).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.taxonomy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.taxonomy_with_http_info(**kwargs)  # noqa: E501
            return data

    def taxonomy_with_http_info(self, **kwargs):  # noqa: E501
        """Permet de récupérer les listes des termes employés par le processus de recherche.  # noqa: E501

        L'API publique propose la récupération des listes des termes (sous la forme d'un couple clé/valeur) constituants les différents critères et filtres pris en compte par le processus de recherche et les données qu'il restitue, notamment :  * La liste des types de décision (`type`) ; * La liste des juridictions dont le système intègre les décisions (`jurisdiction`) ; * La liste des chambres (`chamber`) ; * La liste des formations (`formation`) ; * La liste des commissions (`committee`) ; * La liste des niveaux de publication (`publication`) ; * La liste des matières (`theme`) ; * La liste des solutions (`solution`) ; * La liste des champs et des zones de contenu des décisions pouvant être ciblés par la recherche (`field`) ; * La liste des zones de contenu des décisions (`zones`) ; * etc.  La publication de cette taxonomie permet principalement au prestataire chargé de l'implémentation du frontend (ainsi qu'à certains réutilisateurs avancés) d'automatiser la constitution des formulaires de recherche et l'enrichissement des résultats retournés.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taxonomy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Identifiant de l'entrée de taxonomie à interroger (`type`, `jurisdiction`, `chamber`, etc. - les valeurs disponibles sont accessibles via `GET /taxonomy` sans paramètre).
        :param object key: Clé du terme dont on veut récupérer l'intitulé complet (le paramètre `id` est alors requis), par exemple : la requête `GET /taxonomy?id=jurisdiction&key=cc` retournera `Cour de cassation`.
        :param object value: Intitulé complet du terme dont on veut récupérer la clé (le paramètre `id` est alors requis), par exemple : la requête `GET /taxonomy?id=jurisdiction&value=cour%20de%20cassation` retournera `cc`.
        :param object context_value: Valeur pouvant être requise pour contextualiser certaines listes (par exemple, la liste des chambres qui n’a de sens que dans le contexte d’une juridiction – ainsi, pour obtenir la liste des chambres de la Cour de cassation : `GET /taxonomy?id=chamber&context_value=cc`).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "key", "value", "context_value"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method taxonomy" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "id" in params:
            query_params.append(("id", params["id"]))  # noqa: E501
        if "key" in params:
            query_params.append(("key", params["key"]))  # noqa: E501
        if "value" in params:
            query_params.append(("value", params["value"]))  # noqa: E501
        if "context_value" in params:
            query_params.append(
                ("context_value", params["context_value"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        return self.api_client.call_api(
            "/taxonomy",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=self.auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
